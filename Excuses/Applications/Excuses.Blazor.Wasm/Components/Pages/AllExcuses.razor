@page "/"

@using Excuses.Persistence.Shared.Interfaces
@using Excuses.Persistence.Shared.Models
@using Excuses.Persistence.Shared.Utils

@inject IExcuseRepository ExcuseRepository

<PageTitle>All Excuses</PageTitle>

@if (_isError)
{
    <MessageDisplay Message="Failed to load excuses." CssClass="display-6 text-center text-danger"/>
}
else if (_excuses is null)
{
    <Spinner/>
}
else if (_excuses.Count == 0)
{
    <MessageDisplay Message="No excuses found." CssClass="display-6 text-center text-light"/>
}
else
{
    <div class="px-0">
        <h2 class="text-center text-light mb-4">All Excuses</h2>
        <table class="table table-striped table-bordered table-dark text-center align-middle">
            <thead>
                <tr>
                    <th>Excuse</th>
                    <th>Category</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var excuse in _excuses)
                {
                    <tr key=@(excuse.Id)>
                        <td>@(excuse.Text)</td>
                        <td>@(excuse.Category.Capitalize())</td>
                        <td>
                            <button
                                class="btn btn-danger d-inline-flex justify-content-center align-items-center"
                                type="button"
                                @onclick="() => _onExcuseDelete(excuse.Id)"
                                disabled="@_isDeleting">
                                @if (_deletingId == excuse.Id)
                                {
                                    <span class="spinner-border spinner-border-sm spinner-button me-2"
                                          aria-hidden="true"></span>
                                    <span role="status">Loading...</span>
                                }
                                else
                                {
                                    <span>Delete</span>
                                }
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool _isError;
    private bool _isDeleting;
    private int? _deletingId;

    private List<Excuse>? _excuses;

    protected override async Task OnInitializedAsync()
    {
        // _isError = true;
        // _excuses = [];
        // await Task.Delay(TimeSpan.FromSeconds(2));
        var result = await ExcuseRepository.GetExcusesAsync();
        result.When(
            onSuccess: excuses => _excuses = excuses,
            onFailure: _ => _isError = true
        );
    }

    private async Task _onExcuseDelete(int id)
    {
        _isDeleting = true;
        _deletingId = id;

        await ExcuseRepository.DeleteExcuseAsync(id);

        _deletingId = null;
        _isDeleting = false;
    }

}
