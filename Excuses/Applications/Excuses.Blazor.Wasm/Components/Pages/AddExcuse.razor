@page "/add-excuse"

@using Excuses.Persistence.Shared.DTO
@using Excuses.Persistence.Shared.Interfaces

@inject IExcuseRepository ExcuseRepository
@inject NavigationManager NavigationManager

<PageTitle>Add Excuse</PageTitle>

<div class="px-0">
    <h2 class="text-light text-center mb-4">Add New Excuse</h2>
    @if (_isError)
    {
        <div class="alert alert-danger mb-4" role="alert">
            Failed to add excuse.
        </div>
    }
    <form class="bg-dark text-light p-4 rounded">
        <TextInput
            CssClass="mb-3"
            Id="excuse"
            Label="Excuse"
            Placeholder="Enter excuse"
            Value="@_text"
            ValueChanged="@(text => _text = text)"/>

        <CategorySelect
            CssClass="mb-3"
            Selection="@_category"
            SelectionChanged="@(category => _category = category)"
            IsLoading="@_isLoadingCategories"
            Categories="@_categories"/>

        <LoadingButton
            ButtonClass="btn-primary"
            Text="Add Excuse"
            IsLoading="@_isLoading"
            Disabled="@IsButtonDisabled"
            OnClick="_onAddExcuseSubmit"/>
    </form>
</div>

@code {

    private string _text = string.Empty;
    private string _category = string.Empty;

    private bool _isLoading;
    private bool _isLoadingCategories;
    private bool _isError;

    private List<string>? _categories;

    private bool IsButtonDisabled => _isLoading ||
                                     _isLoadingCategories ||
                                     string.IsNullOrWhiteSpace(_text) ||
                                     string.IsNullOrWhiteSpace(_category);

    protected override async Task OnInitializedAsync()
    {
        // _isError = true;
        // return;

        _isLoadingCategories = true;

        var result = await ExcuseRepository.GetCategoriesAsync();
        result.When(
            onSuccess: categories => _categories = categories,
            onFailure: _ => _isError = true
        );

        _isLoadingCategories = false;
    }

    private async Task _onAddExcuseSubmit()
    {
        _isLoading = true;
        _isError = false;

        var result = await ExcuseRepository.CreateExcuseAsync(new ExcuseInputDto
        {
            Text = _text,
            Category = _category
        });
        result.When(
            onSuccess: _ => NavigationManager.NavigateTo("/"),
            onFailure: _ => _isError = true
        );

        _isLoading = false;
    }

}